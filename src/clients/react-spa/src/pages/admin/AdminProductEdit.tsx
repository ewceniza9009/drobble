// ---- File: src/pages/admin/AdminProductEdit.tsx ----

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { useGetProductByIdQuery, useCreateAdminProductMutation, useUpdateAdminProductMutation } from '../../store/apiSlice';

const AdminProductEdit = () => {
Â  const { productId } = useParams<{ productId: string }>();
Â  const navigate = useNavigate();
Â  const isEditing = Boolean(productId);

Â  // Form state
Â  const [name, setName] = useState('');
Â  const [description, setDescription] = useState('');
Â  const [price, setPrice] = useState(0);
Â  const [stock, setStock] = useState(0);
Â  const [categoryId, setCategoryId] = useState(''); 
Â  const [imageUrl, setImageUrl] = useState('');

Â  // API hooks
Â  const { data: productData, isLoading: isLoadingProduct } = useGetProductByIdQuery(productId!, { skip: !isEditing });
Â  const [createProduct, { isLoading: isCreating }] = useCreateAdminProductMutation();
Â  const [updateProduct, { isLoading: isUpdating }] = useUpdateAdminProductMutation();

Â  // Populate form if we are editing
Â  useEffect(() => {
Â  Â  if (productData) {
Â  Â  Â  setName(productData.name);
Â  Â  Â  setDescription(productData.description);
Â  Â  Â  setPrice(productData.price);
Â  Â  Â  setStock(productData.stock || 0);
Â  Â  Â  setCategoryId(productData.categoryId || '6745f5a2f372d8a156391d18'); 
Â  Â  Â  setImageUrl(productData.imageUrl);
Â  Â  }
Â  Â  // Initialize placeholder for new products if product data hasn't loaded yet
Â  Â  if (!isEditing && !productData) {
Â  Â  Â  setCategoryId('6745f5a2f372d8a156391d18');
Â  Â  }
Â  }, [productData, isEditing]);

Â  const handleSubmit = async (e: React.FormEvent) => {
Â  Â  e.preventDefault();
Â  Â  
Â  Â  // Ensure price and stock are positive for validation
Â  Â  if (price <= 0 || stock < 0) {
Â  Â  Â  Â  toast.error("Price must be positive and Stock cannot be negative.");
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  // FIX 1: Create the explicit payload body, ensuring correct JSON types.
    // All properties sent to the C# [FromBody] must be explicitly cast 
    // to match the expected primitive type (string/number).
Â  Â  const productBody = { 
Â  Â  Â  name: String(name), 
Â  Â  Â  description: String(description), 
Â  Â  Â  price: +price, // Ensure numerical JSON type
Â  Â  Â  stock: +stock, // Ensure numerical JSON type
Â  Â  Â  categoryId: String(categoryId), 
Â  Â  Â  imageUrl: String(imageUrl) 
Â  Â  };

Â  Â  try {
Â  Â  Â  if (isEditing) {
Â  Â  Â  Â  
        // FIX 2: Create the final update payload including the ID for the RTK argument.
        // The C# controller will correctly use the route ID, but the payload 
        // MUST contain the ID property to pass model validation.
        const updatePayload = {
            id: String(productId), // <-- ID IS ADDED HERE AS STRING
            ...productBody
        };
        
Â  Â  Â  Â  console.log("PUT Payload:", updatePayload); 
Â  Â  Â  Â  
Â  Â  Â  Â   await updateProduct({ id: String(productId), ...productBody }).unwrap();
Â  Â  Â  Â  toast.success('Product updated successfully! ðŸŽ‰');
Â  Â  Â  } else {
Â  Â  Â  Â  await createProduct(productBody).unwrap(); // Use productBody for creation
Â  Â  Â  Â  toast.success('Product created successfully!');
Â  Â  Â  }
Â  Â  Â  navigate('/admin/products');
Â  Â  } catch (err: any) {
Â  Â  Â  // Improved error logging for backend validation details
Â  Â  Â  const errorDetail = err?.data?.detail || err?.data?.title || 'Validation failed due to body structure.';
Â  Â  Â  toast.error(`Error: ${errorDetail}`);
Â  Â  Â  console.error("Backend Error Response (Body conflict likely):", err);
Â  Â  }
Â  };

Â  if (isLoadingProduct) return <div>Loading product details...</div>;

Â  return (
Â  Â  <div className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto">
Â  Â  Â  <h1 className="text-2xl font-bold mb-4">{isEditing ? 'Edit Product' : 'Create New Product'}</h1>
Â  Â  Â  <form onSubmit={handleSubmit} className="space-y-4">
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Render categoryId hidden field only when editing, to confirm its value */}
Â  Â  Â  Â  {isEditing && (
Â  Â  Â  Â  Â  Â  <input type="hidden" value={categoryId} />
Â  Â  Â  Â  )}
Â  Â  Â  Â  
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <label className="block text-sm font-medium">Name</label>
Â  Â  Â  Â  Â  <input type="text" value={name} onChange={(e) => setName(e.target.value)} className="w-full p-2 border rounded" required />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <label className="block text-sm font-medium">Description</label>
Â  Â  Â  Â  Â  <textarea value={description} onChange={(e) => setDescription(e.target.value)} className="w-full p-2 border rounded" rows={4}></textarea>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <label className="block text-sm font-medium">Price</label>
Â  Â  Â  Â  Â  <input type="number" step="0.01" value={price} onChange={(e) => setPrice(Number(e.target.value))} className="w-full p-2 border rounded" required />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <label className="block text-sm font-medium">Stock</label>
Â  Â  Â  Â  Â  <input type="number" value={stock} onChange={(e) => setStock(Number(e.target.value))} className="w-full p-2 border rounded" required />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <label className="block text-sm font-medium">Image URL</label>
Â  Â  Â  Â  Â  <input type="text" value={imageUrl} onChange={(e) => setImageUrl(e.target.value)} className="w-full p-2 border rounded" />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  <button type="submit" disabled={isCreating || isUpdating} className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400">
Â  Â  Â  Â  Â  {isCreating || isUpdating ? 'Saving...' : 'Save Product'}
Â  Â  Â  Â  </button>
Â  Â  Â  </form>
Â  Â  </div>
Â  );
};

export default AdminProductEdit;